(radix_sort
 (list_is_null_ornot_null 0
  (list_is_null_ornot_null-1 nil 3781872541
   ("" (induct "l")
    (("" (skolem 1 ("v1" "tl1"))
      (("" (flatten)
        (("" (prop)
          (("1" (skolem * ("v" "t"))
            (("1" (inst 1 "v1" "tl1") nil nil)) nil)
           ("2" (inst 1 "v1" "tl1") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil radix_sort nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (length_0_impliesnull 0
  (length_0_impliesnull-1 nil 3781884526
   ("" (skolem 1 "l")
    (("" (flatten)
      (("" (expand "length")
        (("" (lift-if) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   shostak))
 (length_1or0_is_simple 0
  (length_1or0_is_simple-1 nil 3781884168
   ("" (induct "l")
    (("" (skolem 1 ("v1" "tl1"))
      (("" (flatten)
        (("" (expand "length" -2)
          (("" (both-sides "-" "1" -2)
            (("" (assert)
              (("" (prop)
                (("1" (inst 2 "v1")
                  (("1" (replace -1) (("1" (propax) nil nil)) nil))
                  nil)
                 ("2" (inst 2 "v1")
                  (("2" (assert)
                    (("2" (hide 1)
                      (("2" (lemma "length_0_impliesnull")
                        (("2" (inst -1 "tl1") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (T formal-type-decl nil radix_sort nil)
    (list_induction formula-decl nil list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (odd? const-decl "bool" integers nil)
    (both_sides_minus_le1 formula-decl nil real_props nil)
    (both_sides_plus_le2 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_0_impliesnull formula-decl nil radix_sort nil))
   shostak))
 (length_ofcdr_is_smaller_TCC1 0
  (length_ofcdr_is_smaller_TCC1-1 nil 3781885855
   ("" (subtype-tcc) nil nil) nil nil))
 (length_ofcdr_is_smaller 0
  (length_ofcdr_is_smaller-1 nil 3781885857
   ("" (induct "l")
    (("1" (skolem 1 ("v" "t"))
      (("1" (flatten)
        (("1" (prop)
          (("1" (expand "length" 2 2) (("1" (assert) nil nil)) nil)
           ("2" (replace -1)
            (("2" (expand "length")
              (("2" (expand "length") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 "l") (("2" (flatten) (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil radix_sort nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   shostak))
 (notcons_impliesnull 0
  (notcons_impliesnull-1 nil 3781886850
   ("" (induct "l")
    (("" (skolem 1 ("v" "t")) (("" (flatten) nil nil)) nil)) nil)
   ((list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil radix_sort nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (permutation_null_is_null 0
  (permutation_null_is_null-1 nil 3782047379
   ("" (skolem 1 "l")
    (("" (flatten)
      (("" (prop)
        (("1" (expand "permutations")
          (("1" (expand "occurrences")
            (("1" (inst?)
              (("1" (lift-if)
                (("1" (prop)
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil)
         ("2" (expand "permutations")
          (("2" (expand "occurrences")
            (("2" (inst?)
              (("1" (lift-if)
                (("1" (prop)
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((permutations const-decl "bool" sorting_aux nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (l skolem-const-decl "list[T]" radix_sort nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil radix_sort nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (occurrences def-decl "nat" sorting_aux nil))
   shostak))
 (permutation_switch 0
  (permutation_switch-1 nil 3782046665
   ("" (skolem 1 ("l1" "l2" "l3"))
    (("" (flatten)
      (("" (expand "permutations")
        (("" (skolem 1 "x")
          (("" (inst? -1)
            (("" (inst? -2)
              (("" (replace -1 1) (("" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil radix_sort nil)
    (permutations const-decl "bool" sorting_aux nil))
   shostak))
 (radixsort_permutes 0
  (tentativa-q2-caminho-diferente
   "tentando por outro caminho, usando permutações" 3782046479
   ("" (measure-induct "length(l)" "l")
    (("" (skolem 1 "l1")
      (("" (flatten)
        (("" (expand "radixsort" 1)
          (("" (lemma "merge_sort_is_permutation[T, <<]")
            (("" (inst -1 "merge_sort[T, <=](l1)")
              (("" (lemma "merge_sort_is_permutation[T, <=]")
                (("" (inst -1 "l1")
                  (("" (hide -3)
                    (("" (lemma "permutation_switch")
                      ((""
                        (inst -1
                         "merge_sort[T, <<](merge_sort[T, <=](l1))"
                         "merge_sort[T, <=](l1)" "l1")
                        (("" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (T formal-type-decl nil radix_sort nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (radixsort const-decl "list[T]" radix_sort nil)
    (permutations const-decl "bool" sorting_aux nil)
    (merge_sort_is_permutation formula-decl nil mergesort nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (<< formal-const-decl "(total_preorder?[T])" radix_sort nil)
    (permutation_switch formula-decl nil radix_sort nil)
    (<= formal-const-decl "(total_preorder?[T])" radix_sort nil)
    (merge_sort def-decl "list[T]" mergesort nil))
   shostak)
  (radixsort_permutes-1 nil 3781872046
   ("" (measure-induct "length(l)" "l")
    (("" (skolem 1 "l1")
      (("" (flatten)
        (("" (expand "radixsort")
          (("" (expand "permutations")
            (("" (inst -1 "cdr(l1)")
              (("1" (assert)
                (("1" (lemma "length_ofcdr_is_smaller")
                  (("1" (inst -1 "l1")
                    (("1" (prop)
                      (("1" (expand "merge_sort" 1 2)
                        (("1" (skolem 1 "x")
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1"
                                (expand "merge_sort" 1)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (inst -1 "x")
                                (("2"
                                  (hide 1)
                                  (("2"
                                    (expand "merge_sort" 1 1)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (prop)
                                        (("1" (postpone) nil nil)
                                         ("2"
                                          (lemma
                                           "length_1or0_is_simple")
                                          (("2"
                                            (hide -2)
                                            (("2"
                                              (reveal -4)
                                              (("2"
                                                (postpone)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replace -2)
                        (("2" (expand "merge_sort" 1 2)
                          (("2" (expand "length" 1 1)
                            (("2" (expand "merge_sort" 1 1)
                              (("2"
                                (expand "length" 1 1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (replace -1)
                        (("3" (expand "merge_sort" 2 2)
                          (("3" (expand "length" 2 1)
                            (("3" (expand "merge_sort" 2 1)
                              (("3"
                                (expand "length" 2 1)
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "notcons_impliesnull")
                (("2" (inst -1 "l1")
                  (("2" (prop)
                    (("2" (replace -1)
                      (("2" (expand "merge_sort" 2 2)
                        (("2" (expand "length" 2 1)
                          (("2" (expand "merge_sort" 2 1)
                            (("2" (expand "length" 2 1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (radixsort_sorts_TCC1 0
  (radixsort_sorts_TCC1-1 nil 3777655189
   ("" (typepred "<<" "<=")
    (("" (expand "total_preorder?")
      (("" (expand "preorder?")
        (("" (prop)
          (("1" (hide -2 -3 -5 -6) (("1" (grind) nil nil)) nil)
           ("2" (expand "lex")
            (("2" (expand "transitive?" 1)
              (("2" (skeep)
                (("2" (split -1)
                  (("1" (flatten)
                    (("1" (split -2)
                      (("1" (flatten)
                        (("1" (copy -4)
                          (("1" (expand "transitive?" -1)
                            (("1" (inst -1 "x_1" "y_1" "z")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "transitive?" -6)
                                  (("1"
                                    (inst -6 "y_1" "z" "x_1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (flatten)
                          (("2" (copy -6)
                            (("2" (expand "transitive?" -1)
                              (("2"
                                (inst -1 "x_1" "y_1" "z")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "transitive?" -8)
                                    (("2"
                                      (inst -8 "y_1" "z" "x_1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (split -2)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (copy -6)
                          (("1" (expand "transitive?" -1)
                            (("1" (inst -1 "x_1" "y_1" "z")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "transitive?" -8)
                                  (("1"
                                    (inst -8 "z" "x_1" "y_1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (copy -8)
                        (("2" (expand "transitive?" -1)
                          (("2" (inst -1 "x_1" "y_1" "z")
                            (("2" (assert)
                              (("2"
                                (expand "transitive?" -13)
                                (("2"
                                  (inst -13 "x_1" "y_1" "z")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "lex")
            (("3" (expand "dichotomous?" 1)
              (("3" (skeep)
                (("3" (hide -2 -5)
                  (("3" (copy -2)
                    (("3" (copy -5)
                      (("3" (expand "dichotomous?" -2)
                        (("3" (inst?)
                          (("3" (prop)
                            (("1" (expand "dichotomous?" -4)
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (expand "dichotomous?" -4)
                              (("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lex const-decl "bool" radix_sort nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (dichotomous? const-decl "bool" orders nil)
    (preorder? const-decl "bool" orders nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil radix_sort nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (<< formal-const-decl "(total_preorder?[T])" radix_sort nil)
    (<= formal-const-decl "(total_preorder?[T])" radix_sort nil))
   nil)))

