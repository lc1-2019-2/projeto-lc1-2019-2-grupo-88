(mergesort
 (merge_TCC1 0
  (merge_TCC1-1 nil 3589038563 ("" (subtype-tcc) nil nil) nil nil))
 (merge_TCC2 0
  (merge_TCC2-1 nil 3589038563 ("" (termination-tcc) nil nil) nil nil))
 (merge_TCC3 0
  (merge_TCC3-1 nil 3589038563 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (merge_TCC4 0
  (merge_TCC4-1 nil 3589194902 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (append_reverse_null 0
  (append_reverse_null-1 nil 3781693798
   ("" (induct "l1")
    (("" (skolem 1 ("l1" "tl1"))
      (("" (flatten)
        (("" (expand "append" 1 1)
          (("" (replace -1 1)
            (("" (expand "append" 1) (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil mergesort nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (merge_size 0
  (prove_merge_size "provando merge size" 3781696438
   ("" (induct "l1")
    (("1" (skolem 1 "l2")
      (("1" (expand "length" 1 2)
        (("1" (expand "merge" 1)
          (("1" (expand "append" 1) (("1" (propax) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("v1" "tl1"))
      (("2" (flatten)
        (("2" (induct "l2")
          (("1" (expand "merge" 1)
            (("1" (expand "length" 1 3)
              (("1" (expand "append" 1)
                (("1" (lemma "append_reverse_null")
                  (("1" (inst -1 "tl1")
                    (("1" (replace -1 1)
                      (("1" (expand "append") (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skolem 1 ("v2" "tl2"))
            (("2" (flatten)
              (("2" (expand "merge" 1)
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (expand "length" 1)
                      (("1" (inst-cp -3 "cons(v2, tl2)")
                        (("1" (replace -4 1)
                          (("1" (expand "length" 1 2)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "length" 2)
                      (("2" (replace -1 2)
                        (("2" (expand "length" 2 1)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (prove_merge_size "provando merge size" 3781693687
   ("" (induct "l1")
    (("1" (skolem 1 "l2")
      (("1" (expand "length" 1 2)
        (("1" (expand "merge" 1)
          (("1" (expand "append" 1) (("1" (propax) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("v1" "tl1"))
      (("2" (flatten)
        (("2" (induct "l2")
          (("1" (expand "merge" 1)
            (("1" (expand "length" 1 3)
              (("1" (expand "append" 1) (("1" (postpone) nil nil))
                nil))
              nil))
            nil)
           ("2" (postpone) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (merge def-decl "list[T]" mergesort nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T formal-type-decl nil mergesort nil)
    (list_induction formula-decl nil list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (append_reverse_null formula-decl nil mergesort nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   shostak)
  (merge_size-1 nil 3589039228
   ("" (measure-induct "length(l1) + length(l2)" (l1 l2))
    (("" (skosimp)
      (("" (expand "merge" 1)
        (("" (lift-if)
          (("" (prop)
            (("1" (hide -2) (("1" (rewrite "length_append") nil nil))
              nil)
             ("2" (hide -2) (("2" (rewrite "length_append") nil nil))
              nil)
             ("3" (expand "length" 1 1)
              (("3" (inst -2 "cdr(x!1)" "x!2")
                (("3" (prop)
                  (("1" (expand "length" 1 2) (("1" (assert) nil nil))
                    nil)
                   ("2" (hide - 2)
                    (("2" (expand "length" 1 3)
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (expand "length" 2 1)
              (("4" (inst -1 "x!1" "cdr(x!2)")
                (("4" (prop)
                  (("1" (expand "length" 2 3) (("1" (assert) nil nil))
                    nil)
                   ("2" (hide 2 3)
                    (("2" (expand "length" 1 4)
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (length_append formula-decl nil list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (merge def-decl "list[T]" mergesort nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil mergesort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (merge_occurrence 0
  (prove_merge_occurrence "provando merge occurrence" 3781702545
   ("" (induct "l1")
    (("1" (skolem 1 ("l2" "x"))
      (("1" (expand "merge" 1)
        (("1" (expand "append" 1)
          (("1" (expand "occurrences" 1) (("1" (propax) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("v1" "tl1"))
      (("2" (flatten)
        (("2" (induct "l2")
          (("1" (skolem 1 "x")
            (("1" (expand "merge" 1)
              (("1" (expand "occurrences" 1 3)
                (("1" (lemma "append_reverse_null")
                  (("1" (inst -1 "cons(v1, tl1)")
                    (("1" (replace -1 1)
                      (("1" (hide -1)
                        (("1" (expand "append" 1)
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skolem 1 ("v2" "tl2"))
            (("2" (flatten)
              (("2" (skolem 1 "x")
                (("2" (inst -1 "x")
                  (("2" (expand "merge" 1)
                    (("2" (lift-if)
                      (("2" (prop)
                        (("1" (expand "occurrences" 1 1)
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1"
                                (inst -4 "cons(v2, tl2)" "x")
                                (("1"
                                  (replace -4 1)
                                  (("1"
                                    (expand "occurrences" 1 3)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -3 "cons(v2, tl2)" "x")
                                (("2"
                                  (replace -3 2)
                                  (("2"
                                    (expand "occurrences" 2 3)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "occurrences" 2 1)
                          (("2" (hide 1 -2)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (expand "occurrences" 1 3)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (expand "occurrences" 2 3)
                                  (("2"
                                    (lift-if)
                                    (("2" (prop) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (merge_occurrence-1 nil 3589039505
   ("" (skolem 1 ("_" "_" x))
    (("" (measure-induct "length(l1) + length(l2)" (l1 l2))
      (("" (skosimp)
        (("" (expand "merge" 1)
          (("" (case "x!1 = null")
            (("1" (assert)
              (("1" (expand "append" 1)
                (("1" (expand "occurrences" 1) (("1" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("2" (case "x!2 = null")
              (("1" (assert)
                (("1" (replace -1 2)
                  (("1" (rewrite "append_null" 2)
                    (("1" (expand "occurrences" 2 3)
                      (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (expand "occurrences" 1 (1 2))
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (inst -2 "cdr(x!1)" "x!2")
                            (("1" (prop)
                              (("1"
                                (hide -1 2)
                                (("1"
                                  (expand "length" 1 3)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "occurrences" 2 (1 3))
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (inst -1 "x!1" "cdr(x!2)")
                            (("2" (prop)
                              (("1" (assert) nil nil)
                               ("2"
                                (hide 2 3)
                                (("2"
                                  (expand "length" 1 4)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (append_reverse_null formula-decl nil mergesort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (append def-decl "list[T]" list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil mergesort nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (merge def-decl "list[T]" mergesort nil)
    (occurrences def-decl "nat" sorting_aux nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (append_occurrences 0
  (append_occurrences-1 nil 3781704541
   ("" (induct "l1")
    (("1" (skolem 1 ("l2" "x"))
      (("1" (expand "append")
        (("1" (expand "occurrences") (("1" (propax) nil nil)) nil))
        nil))
      nil)
     ("2" (skolem 1 ("v1" "tl1"))
      (("2" (flatten)
        (("2" (skolem 1 ("l2" "x"))
          (("2" (expand "append" 1)
            (("2" (expand "occurrences" 1 1)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (expand "occurrences" 1 2)
                    (("1" (lift-if)
                      (("1" (assert) (("1" (inst -2 "l2" "x") nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "occurrences" 2 2)
                    (("2" (lift-if)
                      (("2" (prop) (("2" (inst -1 "l2" "x") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil mergesort nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (append def-decl "list[T]" list_props nil)
    (occurrences def-decl "nat" sorting_aux nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (merge_is_permutation 0
  (prove_merge_is_permutation "provamos que merge é permutation"
   3781707572
   ("" (induct "l1")
    (("1" (skolem 1 "l2")
      (("1" (expand "merge" 1)
        (("1" (expand "permutations" 1) (("1" (propax) nil nil)) nil))
        nil))
      nil)
     ("2" (skolem 1 ("v1" "tl1"))
      (("2" (flatten)
        (("2" (induct "l2")
          (("1" (expand "merge" 1)
            (("1" (lemma "append_reverse_null")
              (("1" (inst -1 "cons(v1, tl1)")
                (("1" (replace -1 1)
                  (("1" (expand "permutations" 1)
                    (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skolem 1 ("v2" "tl2"))
            (("2" (flatten)
              (("2" (expand "merge" 1)
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (hide -1)
                      (("1" (inst -2 "cons(v2, tl2)")
                        (("1" (expand "append" 1)
                          (("1" (expand "permutations" 1)
                            (("1" (skolem 1 "x")
                              (("1"
                                (lemma "merge_occurrence")
                                (("1"
                                  (expand "occurrences" 1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (lemma "append_occurrences")
                                        (("1"
                                          (hide -2 -4 -5)
                                          (("1"
                                            (inst
                                             -1
                                             "tl1"
                                             "cons(v2, tl2)"
                                             "x")
                                            (("1"
                                              (inst
                                               -2
                                               "tl1"
                                               "cons(v2, tl2)"
                                               "x")
                                              (("1"
                                                (replace -1 1)
                                                (("1"
                                                  (replace -2 1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -2 -3)
                                        (("2"
                                          (lemma "append_occurrences")
                                          (("2"
                                            (inst
                                             -1
                                             "tl1"
                                             "cons(v2, tl2)"
                                             "x")
                                            (("2"
                                              (inst
                                               -2
                                               "tl1"
                                               "cons(v2, tl2)"
                                               "x")
                                              (("2"
                                                (replace -1 2)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "permutations" 2)
                      (("2" (skolem 2 "x")
                        (("2" (expand "occurrences" 2 1)
                          (("2" (lemma "append_occurrences")
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (inst -2 "cons(v1, tl1)" "tl2" "x")
                                  (("1"
                                    (lemma "merge_occurrence")
                                    (("1"
                                      (inst
                                       -1
                                       "cons(v1, tl1)"
                                       "tl2"
                                       "x")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (expand "append" 1)
                                          (("1"
                                            (expand "occurrences" 1 3)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide -4 -5 -6)
                                                  (("1"
                                                    (lemma
                                                     "append_occurrences")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "tl1"
                                                       "cons(v2, tl2)"
                                                       "x")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (expand
                                                           "occurrences"
                                                           1
                                                           1)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "occurrences"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -3 -4 -5)
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (expand
                                                       "occurrences"
                                                       2
                                                       1)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "append_occurrences")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "tl1"
                                                               "cons(v2, tl2)"
                                                               "x")
                                                              (("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   "occurrences"
                                                                   2
                                                                   4)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 3 -1 -2 -3)
                                  (("2"
                                    (lemma "merge_occurrence")
                                    (("2"
                                      (lemma "append_occurrences")
                                      (("2"
                                        (inst
                                         -1
                                         "cons(v1, tl1)"
                                         "cons(v2, tl2)"
                                         "x")
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (inst
                                               -1
                                               "cons(v1, tl1)"
                                               "tl2"
                                               "x")
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (expand
                                                   "occurrences"
                                                   2
                                                   4)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (prove_merge_permutation "provando merge permutation" 3781703976
   ("" (induct "l1")
    (("1" (skolem 1 "l2")
      (("1" (expand "merge" 1)
        (("1" (expand "permutations" 1) (("1" (propax) nil nil)) nil))
        nil))
      nil)
     ("2" (skolem 1 ("v1" "tl1"))
      (("2" (flatten)
        (("2" (induct "l2")
          (("1" (expand "merge" 1)
            (("1" (lemma "append_reverse_null")
              (("1" (inst -1 "cons(v1, tl1)")
                (("1" (replace -1 1)
                  (("1" (expand "permutations" 1)
                    (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skolem 1 ("v2" "tl2"))
            (("2" (flatten)
              (("2" (expand "merge" 1)
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (hide -1)
                      (("1" (inst -2 "cons(v2, tl2)")
                        (("1" (expand "append" 1)
                          (("1" (expand "permutations" 1)
                            (("1" (skolem 1 "x")
                              (("1"
                                (lemma "merge_occurrence")
                                (("1" (postpone) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (postpone) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (permutations const-decl "bool" sorting_aux nil)
    (merge def-decl "list[T]" mergesort nil)
    (append def-decl "list[T]" list_props nil)
    (T formal-type-decl nil mergesort nil)
    (list_induction formula-decl nil list_adt nil)
    (merge_occurrence formula-decl nil mergesort nil)
    (append_occurrences formula-decl nil mergesort nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (occurrences def-decl "nat" sorting_aux nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (append_reverse_null formula-decl nil mergesort nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   shostak)
  (merge_is_permutation-1 nil 3589039689
   ("" (skeep)
    (("" (expand "permutations")
      (("" (rewrite "merge_size")
        (("" (rewrite "length_append")
          (("" (skeep)
            (("" (rewrite "merge_occurrence")
              (("" (rewrite "occurrences_of_app") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((permutations const-decl "bool" sorting_aux nil)
    (merge_occurrence formula-decl nil mergesort nil)
    (T formal-type-decl nil mergesort nil)
    (list type-decl nil list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (occurrences_of_app formula-decl nil sorting_aux nil))
   shostak))
 (merge_is_permutation_reverse 0
  (merge_is_permutation_reverse-1 nil 3781866205
   ("" (induct "l1")
    (("1" (lemma "append_reverse_null")
      (("1" (skolem 1 "l2")
        (("1" (inst -1 "l2")
          (("1" (replace -1)
            (("1" (expand "merge")
              (("1" (expand "permutations") (("1" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("v1" "tl1"))
      (("2" (flatten)
        (("2" (induct "l2")
          (("1" (expand "merge" 1)
            (("1" (lemma "append_reverse_null")
              (("1" (inst -1 "cons(v1, tl1)")
                (("1" (replace -1)
                  (("1" (expand "permutations")
                    (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skolem 1 ("v2" "tl2"))
            (("2" (flatten)
              (("2" (expand "permutations")
                (("2" (skolem 1 "x")
                  (("2" (inst -1 "x")
                    (("2" (lemma "merge_occurrence")
                      (("2"
                        (inst -1 "cons(v1, tl1)" "cons(v2, tl2)" "x")
                        (("2" (replace -1 1)
                          (("2" (hide -1)
                            (("2" (lemma "append_occurrences")
                              (("2"
                                (inst
                                 -1
                                 "cons(v2, tl2)"
                                 "cons(v1, tl1)"
                                 "x")
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (expand "occurrences" 1)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (merge_occurrence formula-decl nil mergesort nil)
    (append_occurrences formula-decl nil mergesort nil)
    (occurrences def-decl "nat" sorting_aux nil)
    (append_reverse_null formula-decl nil mergesort nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil mergesort nil)
    (append def-decl "list[T]" list_props nil)
    (merge def-decl "list[T]" mergesort nil)
    (permutations const-decl "bool" sorting_aux nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (permutation_append_switch 0
  (permutation_append_switch-1 nil 3781868900
   ("" (induct "l1")
    (("1" (skolem 1 ("l" "l2"))
      (("1" (flatten)
        (("1" (lemma "append_reverse_null")
          (("1" (inst -1 "l2")
            (("1" (replace -1 1) (("1" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skolem * ("v1" "tl1"))
      (("2" (flatten)
        (("2" (induct "l2")
          (("1" (skolem 1 "l")
            (("1" (flatten)
              (("1" (lemma "append_reverse_null")
                (("1" (inst -1 "cons(v1, tl1)")
                  (("1" (replace -1) (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skolem 1 ("v2" "tl2"))
            (("2" (flatten)
              (("2" (skolem 1 "l")
                (("2" (flatten)
                  (("2" (expand "permutations" 1)
                    (("2" (skolem 1 "x")
                      (("2" (lemma "append_occurrences")
                        (("2"
                          (inst -1 "cons(v2, tl2)" "cons(v1, tl1)" "x")
                          (("2" (replace -1 1)
                            (("2" (expand "permutations" -3)
                              (("2"
                                (inst -3 "x")
                                (("2"
                                  (replace -3 1)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (lemma "append_occurrences")
                                      (("2"
                                        (inst
                                         -1
                                         "cons(v1, tl1)"
                                         "cons(v2, tl2)"
                                         "x")
                                        (("2"
                                          (replace -1 1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (append_occurrences formula-decl nil mergesort nil)
    (append_reverse_null formula-decl nil mergesort nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil mergesort nil)
    (append def-decl "list[T]" list_props nil)
    (permutations const-decl "bool" sorting_aux nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (app_pref_suff_is_complete_TCC1 0
  (app_pref_suff_is_complete_TCC1-1 nil 3782060621
   ("" (subtype-tcc) nil nil) nil nil))
 (app_pref_suff_is_complete 0
  (app_pref_suff_is_complete-1 nil 3782060622 ("" (postpone) nil nil)
   nil shostak))
 (occurrence_pref_suff 0
  (occurrence_pref_suff-1 nil 3782059771
   ("" (lemma "app_prefix_suffix")
    (("" (skolem 1 "l")
      (("" (inst? -1)
        (("1" (skolem 1 "x")
          (("1" (replace -1 1)
            (("1" (lemma "append_occurrences")
              (("1" (inst? -1)
                (("1" (replace -1)
                  (("1" (replace -2 1 RL) (("1" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (case "l = null")
          (("1" (replace -1 1)
            (("1" (expand "length" 1) (("1" (assert) nil nil)) nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (append_occurrences formula-decl nil mergesort nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (suffix def-decl "list[T]" sorting_aux nil)
    (prefix def-decl "list[T]" sorting_aux nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (list type-decl nil list_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (l skolem-const-decl "list[T]" mergesort nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (app_prefix_suffix formula-decl nil sorting_aux nil)
    (T formal-type-decl nil mergesort nil))
   shostak))
 (merge_of_sorted_is_sorted 0
  (merge_of_sorted_is_sorted-2 nil 3731751321
   ("" (measure-induct "length(l1) + length(l2)" (l1 l2))
    (("" (skosimp)
      (("" (expand "merge" 1)
        (("" (case "x!1 = null")
          (("1" (assert)
            (("1" (expand "append" 1) (("1" (propax) nil nil)) nil))
            nil)
           ("2" (case "x!2 = null")
            (("1" (assert)
              (("1" (replace -1 2)
                (("1" (rewrite "append_null") nil nil)) nil))
              nil)
             ("2" (assert)
              (("2" (prop)
                (("1" (expand "is_sorted?" 1)
                  (("1" (skeep)
                    (("1" (case k=0)
                      (("1" (expand "nth")
                        (("1" (assert)
                          (("1" (expand "nth")
                            (("1" (expand "merge" 1)
                              (("1"
                                (expand "is_sorted?" (-5 -6))
                                (("1"
                                  (case "cdr(x!1) = null")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "append" 1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (prop)
                                        (("2"
                                          (inst -6 0)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "length" 1)
                                              (("2"
                                                (expand "length" 1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "length" 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "nth" 2)
                        (("2" (assert)
                          (("2" (inst -3 "cdr(x!1)" "x!2")
                            (("2" (prop)
                              (("1"
                                (hide -4 -5)
                                (("1"
                                  (expand "is_sorted?")
                                  (("1"
                                    (inst -1 "k-1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "length" -2)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "length" -2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (rewrite "cdr_of_sorted_is_sorted")
                                    nil
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but (1 4 5))
                                (("3"
                                  (expand "length" 1 3)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "is_sorted?" 2)
                  (("2" (skeep)
                    (("2" (case "k=0")
                      (("1" (expand "nth" 2)
                        (("1" (expand "nth" 2)
                          (("1" (assert)
                            (("1" (expand "merge" 2)
                              (("1"
                                (case "cdr(x!2) = null")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (rewrite "append_null")
                                      (("1"
                                        (hide -)
                                        (("1"
                                          (typepred "<=")
                                          (("1"
                                            (expand "total_preorder?")
                                            (("1"
                                              (expand "dichotomous?")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (hide -)
                                        (("1"
                                          (typepred "<=")
                                          (("1"
                                            (expand "total_preorder?")
                                            (("1"
                                              (expand "dichotomous?")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "is_sorted?" -5)
                                        (("2"
                                          (inst -5 0)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "length" 1)
                                              (("2"
                                                (expand "length" 1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "length" 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "nth")
                        (("2" (expand "nth")
                          (("2" (assert)
                            (("2" (inst -2 "x!1" "cdr(x!2)")
                              (("2"
                                (expand "length" -2 4)
                                (("2"
                                  (rewrite "cdr_of_sorted_is_sorted")
                                  (("2"
                                    (expand "is_sorted?" -2)
                                    (("2"
                                      (inst -2 "k-1")
                                      (("1"
                                        (expand "length" -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (prop)
                                              (("1" (grind) nil nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -2 -3 3 4)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dichotomous? const-decl "bool" orders nil)
    (TRUE const-decl "bool" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cdr_of_sorted_is_sorted formula-decl nil sorting nil)
    (append_null formula-decl nil list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (<= formal-const-decl "(total_preorder?[T])" mergesort nil)
    (is_sorted? const-decl "bool" sorting nil)
    (merge def-decl "list[T]" mergesort nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil mergesort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (merge_of_sorted_is_sorted-1 nil 3589040010
   ("" (measure-induct "length(l1) + length(l2)" (l1 l2))
    (("" (skosimp)
      (("" (expand "merge" 1)
        (("" (case "x!1 = null")
          (("1" (assert)
            (("1" (expand "append" 1) (("1" (propax) nil nil)) nil))
            nil)
           ("2" (case "x!2 = null")
            (("1" (assert)
              (("1" (replace -1 2)
                (("1" (rewrite "append_null") nil nil)) nil))
              nil)
             ("2" (assert)
              (("2" (prop)
                (("1" (expand "is_sorted?" 1)
                  (("1" (skeep)
                    (("1" (case k=0)
                      (("1" (expand "nth")
                        (("1" (assert)
                          (("1" (expand "nth")
                            (("1" (expand "merge" 1)
                              (("1"
                                (expand "is_sorted?" (-5 -6))
                                (("1"
                                  (case "cdr(x!1) = null")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "append" 1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (prop)
                                        (("2"
                                          (inst -6 0)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "length" 1)
                                              (("2"
                                                (expand "length" 1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "list2finseq")
                                            (("2"
                                              (expand "length" 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "nth" 2)
                        (("2" (assert)
                          (("2" (inst -3 "cdr(x!1)" "x!2")
                            (("2" (prop)
                              (("1"
                                (hide -4 -5)
                                (("1"
                                  (expand "is_sorted?")
                                  (("1"
                                    (inst -1 "k-1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "length" -2)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "length" -2)
                                      (("2"
                                        (expand "list2finseq")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "cdr_of_sorted_is_sorted")
                                nil
                                nil)
                               ("3"
                                (hide-all-but (1 4 5))
                                (("3"
                                  (expand "length" 1 3)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "is_sorted?" 2)
                  (("2" (skeep)
                    (("2" (case "k=0")
                      (("1" (expand "nth" 2)
                        (("1" (expand "nth" 2)
                          (("1" (assert)
                            (("1" (expand "merge" 2)
                              (("1"
                                (case "cdr(x!2) = null")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (rewrite "append_null")
                                      (("1"
                                        (hide -)
                                        (("1"
                                          (typepred "<=")
                                          (("1"
                                            (expand "total_order?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "dichotomous?")
                                                (("1"
                                                  (inst
                                                   -2
                                                   "car(x!1)"
                                                   "car(x!2)")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (hide -)
                                        (("1"
                                          (typepred "<=")
                                          (("1"
                                            (expand "total_order?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "dichotomous?")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "is_sorted?" -5)
                                        (("2"
                                          (inst -5 0)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "length" 1)
                                              (("2"
                                                (expand "length" 1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "list2finseq")
                                            (("2"
                                              (expand "length" 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "nth")
                        (("2" (expand "nth")
                          (("2" (assert)
                            (("2" (inst -2 "x!1" "cdr(x!2)")
                              (("2"
                                (expand "length" -2 4)
                                (("2"
                                  (rewrite "cdr_of_sorted_is_sorted")
                                  (("2"
                                    (expand "is_sorted?" -2)
                                    (("2"
                                      (inst -2 "k-1")
                                      (("1"
                                        (expand "length" -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (prop)
                                              (("1" (grind) nil nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -2 -3 3 4)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr_of_sorted_is_sorted formula-decl nil sorting nil)
    (is_sorted? const-decl "bool" sorting nil))
   shostak))
 (merge_sort_TCC1 0
  (merge_sort_TCC1-1 nil 3589038563
   ("" (skeep)
    (("" (expand "length")
      (("" (assert)
        (("" (lift-if)
          (("" (assert) (("" (prop) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (merge_sort_TCC2 0
  (merge_sort_TCC2-1 nil 3589038563
   ("" (skeep)
    (("" (rewrite "length_prefix") (("" (grind) nil nil)) nil)) nil)
   ((nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (length_prefix formula-decl nil sorting_aux nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (T formal-type-decl nil mergesort nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (merge_sort_size 0
  (merge_sort_size-1 nil 3589040671
   ("" (measure-induct "length(l)" l)
    (("" (skeep)
      (("" (expand "merge_sort" 1)
        (("" (lift-if)
          (("" (prop)
            (("" (rewrite "merge_size")
              (("" (inst-cp -1 "prefix(x, floor(length(x) / 2))")
                (("" (inst -1 "suffix(x, floor(length(x) / 2))")
                  (("" (rewrite "length_suffix")
                    (("" (rewrite "length_prefix")
                      (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (merge_size formula-decl nil mergesort nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (prefix def-decl "list[T]" sorting_aux nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (suffix def-decl "list[T]" sorting_aux nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_prefix formula-decl nil sorting_aux nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_suffix formula-decl nil sorting_aux nil)
    (merge_sort def-decl "list[T]" mergesort nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil mergesort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (merge_sort_is_sorted 0
  (merge_sort_is_sorted-1 nil 3589040459
   ("" (measure-induct "length(l)" l)
    (("" (skeep)
      (("" (expand "merge_sort" 1)
        (("" (prop)
          (("1" (expand "is_sorted?" 1)
            (("1" (skeep)
              (("1" (expand "length" -2)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (assert) nil nil)
                     ("2" (expand "length" -2)
                      (("2" (lift-if)
                        (("2" (prop) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "merge_of_sorted_is_sorted")
            (("2"
              (inst -1 "merge_sort(prefix(x, floor(length(x) / 2)))"
               "merge_sort(suffix(x, floor(length(x) / 2)))")
              (("2" (assert)
                (("2" (split)
                  (("1" (inst -1 "prefix(x, floor(length(x) / 2))")
                    (("1" (assert)
                      (("1" (rewrite "length_prefix")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (expand "length" 2)
                    (("2" (assert)
                      (("2" (inst -1 "suffix(x, floor(length(x) / 2))")
                        (("2" (assert)
                          (("2" (rewrite "length_suffix")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (prefix def-decl "list[T]" sorting_aux nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (suffix def-decl "list[T]" sorting_aux nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_prefix formula-decl nil sorting_aux nil)
    (length_suffix formula-decl nil sorting_aux nil)
    (merge_of_sorted_is_sorted formula-decl nil mergesort nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (<= formal-const-decl "(total_preorder?[T])" mergesort nil)
    (is_sorted? const-decl "bool" sorting nil)
    (merge_sort def-decl "list[T]" mergesort nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil mergesort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (append_is_permutation 0
  (append_is_permutation-1 nil 3781863044
   ("" (induct "l1")
    (("1" (lemma "append_reverse_null")
      (("1" (skolem 1 "l2")
        (("1" (inst -1 "l2")
          (("1" (replace -1)
            (("1" (expand "permutations") (("1" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("v1" "tl1"))
      (("2" (flatten)
        (("2" (induct "l2")
          (("1" (expand "append" 1 2)
            (("1" (expand "append" 1)
              (("1" (inst -1 "null")
                (("1" (expand "permutations" 1)
                  (("1" (skolem 1 "x")
                    (("1" (case "x = v1")
                      (("1" (expand "occurrences" 1)
                        (("1" (assert)
                          (("1" (expand "permutations" -2)
                            (("1" (inst -2 "x")
                              (("1"
                                (expand "append" -2 2)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "occurrences")
                        (("2" (assert)
                          (("2" (expand "permutations" -1)
                            (("2" (inst -1 "x")
                              (("2"
                                (expand "append" -1 2)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skolem 1 ("v2" "tl2"))
            (("2" (flatten)
              (("2" (expand "append" 1)
                (("2" (expand "permutations" 1)
                  (("2" (skolem 1 "x")
                    (("2" (expand "occurrences" 1)
                      (("2" (case "x = v1" "x = v2")
                        (("1" (assert)
                          (("1" (copy -2)
                            (("1" (replace -2 -3)
                              (("1"
                                (lemma "append_occurrences")
                                (("1"
                                  (inst-cp
                                   -1
                                   "tl1"
                                   "cons(v2, tl2)"
                                   "x")
                                  (("1"
                                    (replace -2 1)
                                    (("1"
                                      (hide -2)
                                      (("1"
                                        (inst-cp
                                         -1
                                         "tl2"
                                         "cons(v1, tl1)"
                                         "x")
                                        (("1"
                                          (replace -2 1)
                                          (("1"
                                            (hide -1 -2)
                                            (("1"
                                              (expand
                                               "occurrences"
                                               1
                                               (2 4))
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (lemma "append_occurrences")
                            (("2"
                              (inst-cp -1 "tl1" "cons(v2, tl2)" "x")
                              (("2"
                                (replace -2 2)
                                (("2"
                                  (hide -2)
                                  (("2"
                                    (inst-cp
                                     -1
                                     "tl2"
                                     "cons(v1, tl1)"
                                     "x")
                                    (("2"
                                      (replace -2 2)
                                      (("2"
                                        (expand "occurrences" 2 (2 4))
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (lemma "append_occurrences")
                          (("3" (inst-cp -1 "tl1" "cons(v2, tl2)" "x")
                            (("3" (replace -2 2)
                              (("3"
                                (hide -2)
                                (("3"
                                  (inst-cp
                                   -1
                                   "tl2"
                                   "cons(v1, tl1)"
                                   "x")
                                  (("3"
                                    (replace -2 2)
                                    (("3"
                                      (hide -2)
                                      (("3"
                                        (hide -1)
                                        (("3"
                                          (lift-if)
                                          (("3"
                                            (prop)
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide 3)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (expand
                                                     "occurrences"
                                                     1
                                                     (2 4))
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "occurrences"
                                                     2
                                                     (2 4))
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (prop)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (prop)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (occurrences def-decl "nat" sorting_aux nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (append_occurrences formula-decl nil mergesort nil)
    (append_reverse_null formula-decl nil mergesort nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil mergesort nil)
    (append def-decl "list[T]" list_props nil)
    (permutations const-decl "bool" sorting_aux nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (merge_sort_is_permutation 0
  (prova_melhorada "tentando refazer a prova de uma forma menos feia"
   3782059586
   ("" (measure-induct "length(l)" "l")
    (("" (skolem 1 "l1")
      (("" (flatten)
        (("" (expand "merge_sort" 1)
          (("" (lift-if)
            (("" (prop)
              (("1" (expand "permutations" 1) (("1" (propax) nil nil))
                nil)
               ("2" (expand "permutations" 2)
                (("2" (skolem 2 "x")
                  (("2" (lemma "merge_occurrence")
                    (("2" (inst? -1)
                      (("2" (replace -1)
                        (("2" (hide -1)
                          (("2" (expand "permutations" -1)
                            (("2" (copy -1)
                              (("2"
                                (inst? -1)
                                (("2"
                                  (lemma "length_prefix")
                                  (("2"
                                    (inst? -1)
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst -1 "x")
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (inst? -1)
                                                  (("2"
                                                    (lemma
                                                     "length_suffix")
                                                    (("2"
                                                      (inst? -1)
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "x")
                                                              (("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (hide
                                                                   -1)
                                                                  (("2"
                                                                    (lemma
                                                                     "occurrence_pref_suff")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "l1"
                                                                       "x")
                                                                      (("2"
                                                                        (replace
                                                                         -1
                                                                         2
                                                                         RL)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (T formal-type-decl nil mergesort nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (merge_sort def-decl "list[T]" mergesort nil)
    (permutations const-decl "bool" sorting_aux nil)
    (merge_occurrence formula-decl nil mergesort nil)
    (length_suffix formula-decl nil sorting_aux nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (occurrence_pref_suff formula-decl nil mergesort nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_prefix formula-decl nil sorting_aux nil)
    (suffix def-decl "list[T]" sorting_aux nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (prefix def-decl "list[T]" sorting_aux nil)
    (below type-eq-decl nil nat_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil))
   shostak)
  (prova_nova "prova nova" 3781776872
   ("" (measure-induct "length(l)" "l")
    (("" (skolem 1 "x")
      (("" (flatten)
        (("" (expand "merge_sort" 1)
          (("" (lift-if)
            (("" (prop)
              (("1" (expand "permutations") (("1" (propax) nil nil))
                nil)
               ("2" (copy -1)
                (("2" (inst -1 "prefix(x, floor(length(x) / 2))")
                  (("2" (inst -2 "suffix(x, floor(length(x) / 2))")
                    (("2" (prop)
                      (("1" (lemma "merge_is_permutation")
                        (("1"
                          (inst -1
                           "merge_sort(prefix(x, floor(length(x) / 2)))"
                           "merge_sort(suffix(x, floor(length(x) / 2)))")
                          (("1" (lemma "app_prefix_suffix")
                            (("1" (lemma "permutations_of_appends")
                              (("1"
                                (inst?)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (lemma "app_prefix_suffix")
                                    (("1"
                                      (hide -5 -6)
                                      (("1"
                                        (hide -2)
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (inst
                                             -1
                                             "x"
                                             "floor(length(x) / 2)")
                                            (("1"
                                              (reveal -3 -4 -6)
                                              (("1"
                                                (inst
                                                 -3
                                                 "merge_sort(suffix(x, floor(length(x) / 2)))"
                                                 "suffix(x, floor(length(x) / 2))"
                                                 "merge_sort(prefix(x, floor(length(x) / 2)))"
                                                 "prefix(x, floor(length(x) / 2))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "permutations_is_transitive")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "merge(merge_sort(prefix(x, floor(length(x) / 2))),
                         merge_sort(suffix(x, floor(length(x) / 2))))"
                                                       "append(merge_sort(suffix(x, floor(length(x) / 2))),
                          merge_sort(prefix(x, floor(length(x) / 2))))"
                                                       "append(prefix(x, floor(length(x) / 2)),
              suffix(x, floor(length(x) / 2)))")
                                                      (("1"
                                                        (hide -2 -3)
                                                        (("1"
                                                          (hide 1)
                                                          (("1"
                                                            (lemma
                                                             "merge_is_permutation_reverse")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "merge_sort(prefix(x, floor(length(x) / 2)))"
                                                               "merge_sort(suffix(x, floor(length(x) / 2)))")
                                                              (("1"
                                                                (reveal
                                                                 *)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-4
                                                                    -5
                                                                    -6
                                                                    -12
                                                                    -13
                                                                    -14
                                                                    -15
                                                                    -16
                                                                    1
                                                                    2))
                                                                  (("1"
                                                                    (lemma
                                                                     "permutation_append_switch")
                                                                    (("1"
                                                                      (hide
                                                                       -2)
                                                                      (("1"
                                                                        (hide
                                                                         -8)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "append(merge_sort(suffix(x, floor(length(x) / 2))), merge_sort(prefix(x, floor(length(x) / 2))))"
                                                                           "suffix(x, floor(length(x) / 2))"
                                                                           "prefix(x, floor(length(x) / 2))")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -1 3)
                        (("2" (lemma "length_suffix")
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (lemma "length_prefix")
                        (("3" (inst?) (("3" (assert) nil nil)) nil))
                        nil)
                       ("4" (lemma "length_suffix")
                        (("4" (inst?) (("4" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (T formal-type-decl nil mergesort nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (merge_sort def-decl "list[T]" mergesort nil)
    (permutations const-decl "bool" sorting_aux nil)
    (suffix def-decl "list[T]" sorting_aux nil)
    (length_prefix formula-decl nil sorting_aux nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_suffix formula-decl nil sorting_aux nil)
    (merge_is_permutation formula-decl nil mergesort nil)
    (app_prefix_suffix formula-decl nil sorting_aux nil)
    (permutations_is_transitive formula-decl nil sorting_aux nil)
    (merge_is_permutation_reverse formula-decl nil mergesort nil)
    (permutation_append_switch formula-decl nil mergesort nil)
    (merge def-decl "list[T]" mergesort nil)
    (append def-decl "list[T]" list_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (permutations_of_appends formula-decl nil sorting_aux nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (prefix def-decl "list[T]" sorting_aux nil)
    (below type-eq-decl nil nat_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil))
   shostak)
  (prova_agora_vai "prova agora vai" 3781714030
   ("" (measure-induct "length(l)" "l")
    (("" (skolem 1 "x")
      (("" (flatten)
        (("" (expand "merge_sort" 1)
          (("" (lift-if)
            (("" (prop)
              (("1" (expand "permutations") (("1" (propax) nil nil))
                nil)
               ("2" (copy -1)
                (("2" (inst -1 "prefix(x, floor(length(x) / 2))")
                  (("2" (inst -2 "suffix(x, floor(length(x) / 2))")
                    (("2" (prop)
                      (("1" (lemma "merge_is_permutation")
                        (("1"
                          (inst -1
                           "merge_sort(prefix(x, floor(length(x) / 2)))"
                           "merge_sort(suffix(x, floor(length(x) / 2)))")
                          (("1" (lemma "app_prefix_suffix")
                            (("1" (lemma "permutations_of_appends")
                              (("1" (postpone) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -1 3)
                        (("2" (lemma "length_suffix")
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (lemma "length_prefix")
                        (("3" (inst?) (("3" (assert) nil nil)) nil))
                        nil)
                       ("4" (lemma "length_suffix")
                        (("4" (inst?) (("4" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (provando_questao_1 "provando questao 1" 3781709108
   ("" (induct "l")
    (("1" (expand "merge_sort")
      (("1" (expand "length")
        (("1" (expand "permutations") (("1" (propax) nil nil)) nil))
        nil))
      nil)
     ("2" (skolem * ("v1" "tl1"))
      (("2" (flatten)
        (("2" (expand "merge_sort" 1)
          (("2" (lift-if)
            (("2" (prop)
              (("1" (expand "permutations" 1) (("1" (propax) nil nil))
                nil)
               ("2" (expand "permutations" 2 1)
                (("2" (skolem 2 "x")
                  (("2" (lemma "merge_occurrence")
                    (("2" (postpone) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (merge_sort_is_permutation-1 nil 3589041194
   ("" (induct "l") (("1" (postpone) nil nil) ("2" (postpone) nil nil))
    nil)
   ((nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (suffix def-decl "list[T]" sorting_aux nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (length_prefix formula-decl nil sorting_aux nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (app_prefix_suffix formula-decl nil sorting_aux nil)
    (occurrences_of_app formula-decl nil sorting_aux nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (merge_occurrence formula-decl nil mergesort nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_suffix formula-decl nil sorting_aux nil)
    (prefix def-decl "list[T]" sorting_aux nil)
    (permutations const-decl "bool" sorting_aux nil)
    (merge_sort def-decl "list[T]" mergesort nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil mergesort nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (merge_sort_works 0
  (merge_sort_works-1 nil 3589041415
   ("" (skeep)
    (("" (rewrite "merge_sort_is_sorted")
      (("" (rewrite "merge_sort_is_permutation") nil nil)) nil))
    nil)
   ((merge_sort_is_sorted formula-decl nil mergesort nil)
    (T formal-type-decl nil mergesort nil)
    (list type-decl nil list_adt nil)
    (merge_sort_is_permutation formula-decl nil mergesort nil))
   shostak))
 (merge_sort_is_conservative 0
  (merge_sort_is_conservative-1 nil 3778250623
   ("" (skeep :preds? t)
    ((""
      (name "mmin"
            "min({k: below[length(l)] | equality(nth(merge_sort(l),m), nth(l, k))})")
      (("1"
        (name "nmin"
              "min(remove(mmin,{k: below[length(l)] | equality(nth(merge_sort(l),m), nth(l, k))}))")
        (("1" (expand "remove")
          (("1" (inst 1 "mmin" "nmin")
            (("1" (typepred "mmin" "nmin")
              (("1" (prop)
                (("1" (expand "remove")
                  (("1" (expand "member")
                    (("1" (flatten)
                      (("1" (inst -3 "nmin") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (postpone) nil nil) ("3" (postpone) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (postpone) nil nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   nil shostak)))

